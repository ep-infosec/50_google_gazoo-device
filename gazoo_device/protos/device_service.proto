// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The Pigweed device RPC proto definition.
// The source of truth of this proto can be found at
// https://github.com/project-chip/connectedhomeip/tree/master/examples/common/pigweed/protos
syntax = "proto3";

package chip.rpc;

import "third_party/py/gazoo_device/protos/common.proto";

message PairingInfo {
  uint32 code = 1;
  uint32 discriminator = 2;
  string qr_code = 3;
  string qr_code_url = 4;
}

message SpakeInfo {
  optional bytes verifier = 1;
  optional bytes salt = 2;
  optional uint32 iteration_count = 3;
}

// type lengths defined in chip spec 8.2.3.1
message DeviceInfo {
  uint32 vendor_id = 1;
  uint32 product_id = 2;
  uint32 software_version = 3;
  string serial_number = 4;
  PairingInfo pairing_info = 5;
  string software_version_string = 6;
}

message FabricInfo {
  uint32 fabric_id = 1;
  uint64 node_id = 2;
}

message DeviceState {
  uint64 time_since_boot_millis = 1;
  repeated FabricInfo fabric_info = 2;
}

message PairingState {
  bool pairing_enabled = 1;
}

message MetadataForProvider {
  bytes tlv = 1;
}

service Device {
  // To factory reset the device.
  rpc FactoryReset(pw.protobuf.Empty) returns (pw.protobuf.Empty) {}

  // To reboot the device.
  rpc Reboot(pw.protobuf.Empty) returns (pw.protobuf.Empty) {}

  // To trigger the device OTA.
  rpc TriggerOta(pw.protobuf.Empty) returns (pw.protobuf.Empty) {}

  // To get the device static information.
  rpc GetDeviceInfo(pw.protobuf.Empty) returns (DeviceInfo) {}

  // To get the device current state.
  rpc GetDeviceState(pw.protobuf.Empty) returns (DeviceState) {}

  // To set the device's pairing state.
  rpc SetPairingState(PairingState) returns (pw.protobuf.Empty) {}

  // To get the device's pairing state.
  rpc GetPairingState(pw.protobuf.Empty) returns (PairingState) {}

  // To set the device's pairing info.
  rpc SetPairingInfo(PairingInfo) returns (pw.protobuf.Empty) {}

  // Get Spake information.
  rpc GetSpakeInfo(pw.protobuf.Empty) returns (SpakeInfo) {}

  // Set Spake information.
  rpc SetSpakeInfo(SpakeInfo) returns (pw.protobuf.Empty) {}

  // Set OTA Metadata for OTA provider
  rpc SetOtaMetadataForProvider(MetadataForProvider)
      returns (pw.protobuf.Empty) {}
}
